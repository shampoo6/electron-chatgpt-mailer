import {app, BrowserWindow, Menu, MenuItem} from 'electron';
import {WindowManager} from "./windows/WindowManager";
import {WindowNo} from "./windows/WindowNo";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit();
}

// 清除缓存
const clearCache = async (): Promise<void> => {
    const win = WindowManager.instance.get(WindowNo.Main)
    const ses = win.webContents.session
    await ses.clearCache()
    await ses.clearStorageData()
    await ses.clearHostResolverCache()
    await ses.clearAuthCache()
}

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
        maximizable: false,
        resizable: false
    });

    WindowManager.instance.put(WindowNo.Main, mainWindow)

    mainWindow.maximize()

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY/*, {
        userAgent: 'Chrome',
        httpReferrer: 'https://www.google.com/'
    }*/)

    // Open the DevTools.
    mainWindow.webContents.openDevTools();

    const menu = Menu.getApplicationMenu()
    menu.append(new MenuItem({
        label: '回首页',
        click: () => {
            mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY/*, {
                userAgent: 'Chrome',
                httpReferrer: 'https://www.google.com/'
            }*/)
        }
    }))
    Menu.setApplicationMenu(menu)
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
    createWindow()
    await clearCache()
    await require('./message/sendMail')
    await require('./message/getQuestion')
    await require('./message/makeFile')
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
